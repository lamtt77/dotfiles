#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
;; ITERM2 MOUSE SUPPORT
    (unless window-system
      (require 'mouse)
      (xterm-mouse-mode t)
      (defun track-mouse (e))
      (setq mouse-sel-mode t)
    )

(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(tool-bar-mode -1)

;; from https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq initial-scratch-message "Welcome in Emacs") ; print a default message in the empty scratch buffer opened at startup
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
  (use-package try			
  :ensure t)
#+END_SRC
* evil and evil-collection
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  ;;(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 0))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

* postframe
#+BEGIN_SRC emacs-lisp
  (use-package posframe :ensure t)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* org mode 
#+BEGIN_SRC emacs-lisp
       (use-package org-bullets		
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 

       (global-set-key (kbd "C-c c")
       'org-capture)

     (setq org-capture-templates
     '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" "Appointments")
     "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
     ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
     "* Note %?\n%T")
     ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
     "* %? %^L %^g \n%T" :prepend t)
     ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics:")
     "* %?\n%T" :prepend t)
     ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
     "* %?\n%T" :prepend t)
     ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
     "* %?\nEntered on %U\n  %i\n  %a")	
     ("s" "Screencast" entry (file "~/Dropbox/orgfiles/screencastnotes.org")
     "* %?\n%i\n")))

   (defadvice org-capture-finalize
   (after delete-capture-frame activate)
   "Advise capture-finalize to close the frame"
   (if (equal "capture" (frame-parameter nil 'name))
   (delete-frame)))

   (defadvice org-capture-destroy
   (after delete-capture-frame activate)
   "Advise capture-destroy to close the frame"
   (if (equal "capture" (frame-parameter nil 'name))
   (delete-frame)))

   (use-package noflet
   :ensure t )
   (defun make-capture-frame ()
   "Create a new frame and run org-capture."
   (interactive)
   (make-frame '((name . "capture")))
   (select-frame-by-name "capture")
   (delete-other-windows)
   (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
   (org-capture)))				
#+END_SRC

* Ace window for easy window switching
#+BEGIN_SRC emacs-lisp
  ;; (use-package tabbar
  ;; :ensure t
  ;; :config (tabbar-mode 1)
  ;; )

  (use-package ace-window
  :ensure t
  :init
  (progn
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
  '(aw-leading-char-face
  ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ))
#+END_SRC

* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
  ;; (defalias 'list-buffers 'ibuffer) ; make ibuffer default

  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
  :ensure t
  )

  (use-package swiper
  :ensure try
  :config
  (progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-load-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))

#+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
  (ac-config-default)
  (global-auto-complete-mode t)
  ))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC
* reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
#+END_SRC
* flycheck / jedi
#+BEGIN_SRC emacs-lisp
  (use-package flycheck			
  :ensure t
  :init
  (global-flycheck-mode t))

  ;; (use-package jedi
  ;; :ensure t
  ;; :init
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  (use-package elpy
    :ensure t
    :custom (elpy-rpc-backend "jedi")
    :config 
    (elpy-enable)
  )

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC

* Elpy / Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package elpy
  :ensure t
  :config
  (elpy-enable))

  (use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))

#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree			
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Misc packages
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  ; this color looks good for the zenburn theme but not for the one
  ; I'm using for the videos
  ; (setq beacon-color "#666600")
  )

  ; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))

#+END_SRC
* iedit and narrow / widen dwim
#+BEGIN_SRC emacs-lisp
  ; mark and edit all copies of the marked region simultaniously. 
  (use-package iedit
  :ensure t)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)		
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

#+END_SRC
* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
      :ensure t
      :config
	     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	     (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	     (setq web-mode-engines-alist
		   '(("django"    . "\\.html\\'")))
	     (setq web-mode-ac-sources-alist
	     '(("css" . (ac-source-css-property))
	     ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
	   ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  (setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned

#+END_SRC
* Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil)

  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))
#+END_SRC
* c++
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
  :ensure t
  :config 
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )					

#+END_SRC
* dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
	   ("M-g j" . dumb-jump-go)
	   ("M-g x" . dumb-jump-go-prefer-external)
	   ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :init
  (dumb-jump-mode)
    :ensure
  )
#+END_SRC
* IBuffer and emmet
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
	  (quote (("default"
		   ("dired" (mode . dired-mode))
		   ("org" (name . "^.*org$"))
		   ("magit" (mode . magit-mode))
		   ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
		   ("web" (or (mode . web-mode) (mode . js2-mode)))
		   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		   ("mu4e" (or

			    (mode . mu4e-compose-mode)
			    (name . "\*mu4e\*")
			    ))
		   ("programming" (or
				   (mode . clojure-mode)
				   (mode . clojurescript-mode)
				   (mode . python-mode)
				   (mode . c++-mode)))
		   ("emacs" (or
			     (name . "^\\*scratch\\*$")
			     (name . "^\\*Messages\\*$")))
		   ))))
    (add-hook 'ibuffer-mode-hook
	      (lambda ()
		(ibuffer-auto-mode 1)
		(ibuffer-switch-to-saved-filter-groups "default")))

    ;; don't show these
					    ;(add-to-list 'ibuffer-never-show-predicates "zowie")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)

  (use-package emmet-mode			
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  )
#+END_SRC

* Pasting images into ORG-mode on Mac
From: http://www.enist.org/blog/post/pasting-images-into-org-mode-on-mac/

#+BEGIN_SRC emacs-lisp
  (defun make-buffer-subdir (name)
    (let ((path  (concat (file-name-directory buffer-file-name) name)))
      (make-directory path t)
      (file-name-as-directory path))
    )

  ;; Paste from clipboard
  (defun org-paste-clipboard ()
    (interactive)
    (setq myvar/folder-name "images")	;

    (setq myvar/folder-path  (make-buffer-subdir myvar/folder-name)) ;  (file-name-directory buffer-file-name)
    (let* ((image-file (concat
			myvar/folder-path
			(read-string "Enter image name:")
			".png")))

      (message image-file)
      ;; requires pngpaste on OSX (brew install pngpaste)
      (call-process-shell-command (concat "pngpaste " image-file))

      (insert (concat  "#+CAPTION: " (read-string "Caption: ") "\n"))
      (insert (format "[[file:%s]]"  (concat "./" myvar/folder-name "/" (file-name-nondirectory image-file))  ))
      (org-display-inline-images)))

#+END_SRC
